Unit SimulateHydraulicCalcs;

Interface

Uses  DrillSimVariables,
      SimulateUpdate,
      DrillSimUtilities,
      SimulateHydrostaticCalcs,
      SimulateRheology;

Procedure HyCalc;


Implementation

{ ---------------------- Flow ---------------------- }

Procedure FlowRateCalc;         { call more often than holecalc }
Var
  i       : integer;
 { PmpOp   : array[1..3] of real;  }
Begin
  With Data do
  Begin
    FlowIn:=Zero; TotStrks:=Zero;
    for i:=1 to MaxPumps do
    Begin
      PmpOp[i]:=Pump[i,1] * Pump[i,2] / 100 * Pump[i,3];
      TotStrks:=TotStrks + Pump[i,3];
      FlowIn :=FlowIn + PmpOp[i];
    End;
    ScreenService;
    if (TotStrks > Zero) and (FlowIn > Zero) then Pumping:=True
                                             else Pumping:=False;
    ScreenService;
    GetCurrentTime (t);
    t1:=t2;
    t2:=t.Seconds;
    if t2<t1 then t1:=t1-60;
    if Pumping then
    Begin
      if t2<>t1 then StrokeCounter:=StrokeCounter+((t2-t1)/60*TotStrks);
      LagDT:=PipeCap * Bbl2Gal / FlowIn;                    { Down Time    }
      LagUT:=AnnVol  * Bbl2Gal / FlowIn;                    { Up   Time    }
      ScreenService;
      LagDS:=LagDT   * TotStrks;                          { Down Strokes }
      LagUS:=LagUT   * TotStrks;                          { Up   Strokes }
      TotCircStrks:=LagDS + LagUS;
    End;
    ScreenService;
  End;
End;



{ ------------------ Hydraulic Controller ---------------- }

Procedure HyCalc;
Begin
  With Data do
  Begin

  end;
End;

Begin
End.
